import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "base"
    id "maven-publish"

    id "org.jetbrains.kotlin.jvm" version "2.1.0" apply false
    id "org.jetbrains.dokka" version "2.0.0" apply false

    // These plugins need to be loaded together, so we must declare them up front.
    id 'com.android.library' version "8.9.0" apply false
    id 'org.jetbrains.kotlin.android' version "2.1.0" apply false
}

repositories {
    mavenCentral()
    google()
    mavenLocal()
}

allprojects {
    version = "0.78.2"
    group   = "im.molly"

    def overrideVersion = System.getenv("OVERRIDE_VERSION")
    if (overrideVersion) {
        version = overrideVersion.replaceFirst(/^v/, '')
    }

    tasks.withType(KotlinCompile).configureEach {
        compilerOptions.jvmTarget = JvmTarget.JVM_17
    }
}

subprojects {
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.encoding = 'UTF-8'
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    allprojects {
        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.compilerArgs += ["-Xlint:deprecation", "-Xlint:fallthrough", "-Xlint:unchecked"]
        }
        tasks.withType(AbstractArchiveTask) {
            preserveFileTimestamps = false
            reproducibleFileOrder = true
        }
    }

    apply plugin: "org.jetbrains.dokka"
}

task makeJniLibrariesDesktop(type:Exec) {
  group 'Rust'
  description 'Build the JNI libraries'

  def debugLevelLogsFlag = project.hasProperty('debugLevelLogs') ? ['--debug-level-logs'] : []
  def jniTypeTaggingFlag = project.hasProperty('jniTypeTagging') ? ['--jni-type-tagging'] : []
  def jniCheckAnnotationsFlag = project.hasProperty('jniCheckAnnotations') ? ['--jni-check-annotations'] : []
  def debugFlag = project.hasProperty('debugRust') ? ['--debug'] : []
  // Explicitly specify 'bash' for Windows compatibility.
  commandLine 'bash', './build_jni.sh', *debugLevelLogsFlag, *jniTypeTaggingFlag, *jniCheckAnnotationsFlag, *debugFlag, 'desktop'
}

task makeJniLibrariesServer(type:Exec) {
  group 'Rust'
  description 'Build the JNI libraries'

  def debugLevelLogsFlag = project.hasProperty('debugLevelLogs') ? ['--debug-level-logs'] : []
  def jniTypeTaggingFlag = project.hasProperty('jniTypeTagging') ? ['--jni-type-tagging'] : []
  def jniCheckAnnotationsFlag = project.hasProperty('jniCheckAnnotations') ? ['--jni-check-annotations'] : []
  def debugFlag = project.hasProperty('debugRust') ? ['--debug'] : []
  def target = project.hasProperty('crossCompileServer') ? 'server-all' : 'server'
  // Explicitly specify 'bash' for Windows compatibility.
  commandLine 'bash', './build_jni.sh', *debugLevelLogsFlag, *jniTypeTaggingFlag, *jniCheckAnnotationsFlag, *debugFlag, target
}

task cargoClean(type:Exec) {
  group 'Rust'
  commandLine 'cargo', 'clean'
}

task cleanJni(type: Delete) {
  description 'Clean JNI libs'
  delete fileTree('./android/src/main/jniLibs') {
    include '**/*.so'
  }
  delete fileTree('./client/src/main/resources') {
    include '**/*.so'
    include '**/*.dylib'
    include '**/*.dll'
  }
  delete fileTree('./server/src/main/resources') {
    include '**/*.so'
    include '**/*.dylib'
    include '**/*.dll'
  }
}

clean.dependsOn([cargoClean, cleanJni])

// PUBLISHING

// Late evaluation after this point.

evaluationDependsOnChildren()

subprojects {
  plugins.withType(MavenPublishPlugin) {
    publishing {
      repositories {
        maven {
          name = 'Cloudsmith'
          url = uri('https://maven.cloudsmith.io/mollyim/libsignal/')
          credentials {
            username = System.getenv('CLOUDSMITH_USER')
            password = System.getenv('CLOUDSMITH_API_KEY')
          }
        }
      }
    }
  }
}
